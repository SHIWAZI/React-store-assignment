{"version":3,"sources":["context/StoreContext.js","component/Navbar.js","component/StoreDetails.js","component/StoreList.js","component/NewForm.js","component/CreateStoreForm.js","App.js","serviceWorker.js","index.js"],"names":["storesContext","createContext","StoreContextProvider","props","useState","store","location","id","stores","setStores","Provider","value","addStore","uuid","removeStore","filter","children","Navbar","useContext","className","length","StoreDetails","onClick","StoreList","map","Key","NewForm","setStore","setLocation","handleStore","e","preventDefault","onSubmit","type","placeholder","onChange","target","required","CreateStoreForm","React","createClass","getInitialState","render","this","state","index","key","obj","available","name","img","Math","floor","dis","handleSubmit","ref","lng","refs","lat","fetch","then","data","json","setState","console","log","App","StoreContext","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mNAGaA,EAAcC,0BA4BZC,EA1BY,SAACC,GAAU,IAAD,EACTC,mBAAS,CAC7B,CAACC,MAAM,SAASC,SAAS,eAAgBC,GAAG,GAC5C,CAACF,MAAM,SAASC,SAAS,eAAgBC,GAAG,GAC5C,CAACF,MAAM,SAASC,SAAS,eAAgBC,GAAG,GAC5C,CAACF,MAAM,SAASC,SAAS,eAAgBC,GAAG,KALf,mBAC3BC,EAD2B,KACpBC,EADoB,KAmBjC,OACI,kBAACT,EAAcU,SAAf,CAAwBC,MAAO,CAACH,SAAOI,SAZ5B,SAACP,EAAMC,GAClBG,EAAU,GAAD,mBAAKD,GAAL,CAAY,CAACH,QAAMC,WAASC,GAAGM,WAWQC,YARlC,SAACP,GAClBE,EAAUD,EAAOO,QAAO,SAAAV,GAAK,OAAEA,EAAME,KAAKA,SAQtCJ,EAAMa,WCTAC,EAbF,SAACd,GAAU,IACjBK,EAAQU,qBAAWlB,GAAnBQ,OAEJ,OACK,yBAAKW,UAAU,WACnB,gEACA,iDAAuBX,EAAOY,OAA9B,yBCKWC,EAZI,SAAC,GAAY,IAAXhB,EAAU,EAAVA,MACVS,EAAeI,qBAAWlB,GAA1Bc,YACP,OACI,yBAAKK,UAAU,cACX,wBAAMG,QAAS,kBAAIR,EAAYT,EAAME,MAC7C,yBAAKY,UAAU,SAASd,EAAMA,OAC9B,yBAAKc,UAAU,YAAYd,EAAMC,aCatBiB,EAlBC,WAAM,IACZf,EAAQU,qBAAWlB,GAAnBQ,OACN,OAAOA,EAAOY,OACV,yBAAKD,UAAU,cACX,4BAEKX,EAAOgB,KAAI,SAAAnB,GAAQ,OAAO,kBAAC,EAAD,CAAcA,MAAOA,EAAOoB,IAAKpB,EAAME,UAMxE,yBAAKY,UAAU,SAAf,2DCWKO,EAvBD,WAAM,IACTd,EAAUM,qBAAWlB,GAArBY,SADQ,EAEQR,mBAAS,IAFjB,mBAERC,EAFQ,KAEFsB,EAFE,OAGcvB,mBAAS,IAHvB,mBAGRE,EAHQ,KAGCsB,EAHD,KAKTC,EAAY,SAACC,GACfA,EAAEC,iBACHnB,EAASP,EAAMC,GACfqB,EAAS,IACTC,EAAY,KAEf,OAEG,0BAAMI,SAAUH,GAChB,2BAAOI,KAAK,OAAQC,YAAa,SAAUvB,MAAON,EAAO8B,SAAU,SAACL,GAAD,OAAKH,EAASG,EAAEM,OAAOzB,QAAQ0B,UAAQ,IAC1G,2BAAOJ,KAAK,OAAQC,YAAa,iBAAkBvB,MAAOL,EAAU6B,SAAU,SAACL,GAAD,OAAKF,EAAYE,EAAEM,OAAOzB,QAAQ0B,UAAQ,IAExH,2BAAOJ,KAAK,SAAStB,MAAM,iBAAiBW,QAASO,MC8B1CS,EAhDWC,IAAMC,YAAY,CAAC,YAAD,kBACvCC,gBAAiB,WACT,MAAO,CACHjC,OAAQ,KAGhBkC,OAAQ,WACJ,IAAIlC,EAASmC,KAAKC,MAAMpC,OAW3B,OAVGA,EAASA,EAAOgB,KAAI,SAASnB,EAAOwC,GAChC,OACI,wBAAIC,IAAKD,GACL,0BAAM1B,UAAWd,EAAM0C,IAAIC,YAC3B,0BAAM7B,UAAU,QAAQd,EAAM0C,IAAIE,MAClC,0BAAM9B,UAAU,OAAOd,EAAM0C,IAAIG,KACjC,0BAAM/B,UAAU,QAAQgC,KAAKC,MAAM/C,EAAMgD,IAAM,KAA/C,WAKR,yBAAK9C,GAAG,mBACJ,0BAAMA,GAAG,SAASyB,SAAUW,KAAKW,cAC7B,oDACA,2BAAOrB,KAAK,OAAOsB,IAAI,MAAMrB,YAAY,MAAMG,UAAQ,IACvD,uDACA,2BAAOJ,KAAK,OAAOsB,IAAI,MAAMrB,YAAY,WAAWG,UAAQ,IAC5D,wDACA,2BAAOJ,KAAK,OAAOsB,IAAI,MAAMrB,YAAY,YAAYG,UAAQ,IAC7D,2BAAOJ,KAAK,SAAStB,MAAM,gBAE/B,4BAAKH,KAIf8C,aAAc,SAASxB,GAAG,IAAD,OACvBA,EAAEC,iBACA,IAAIyB,EAAMb,KAAKc,KAAKD,IAAI7C,MACtB+C,EAAMf,KAAKc,KAAKC,IAAI/C,MAErBgD,MAAM,mBAAqBH,EAAM,QAAUE,GAAKE,MAAK,SAASC,GAC/D,OAAOA,EAAKC,UACXF,MAAM,SAAAE,GACL,EAAKC,SAAS,CACVvD,OAAQsD,IAEZE,QAAQC,IAAIH,SCzBjBI,MAbf,WACE,OACE,yBAAK/C,UAAU,OACd,kBAACgD,EAAD,KACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJeC,QACW,cAA7BC,OAAO/D,SAASgE,UAEe,UAA7BD,OAAO/D,SAASgE,UAEhBD,OAAO/D,SAASgE,SAASC,MACvB,2DCZNC,IAAS9B,OACP,kBAAC,IAAM+B,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlB,QAAQkB,MAAMA,EAAMC,a","file":"static/js/main.bbac0b85.chunk.js","sourcesContent":["import React, { createContext ,useState} from \"react\"\nimport uuid from 'uuid/v1'\n\nexport const storesContext=createContext();\n\nconst StoreContextProvider=(props)=> {\n    const[stores,setStores]=useState([\n        {store:'Store1',location:'GoogleMapes1', id:1},\n        {store:'Store2',location:'GoogleMapes2', id:2},\n        {store:'Store3',location:'GoogleMapes3', id:3},\n        {store:'Store4',location:'GoogleMapes4', id:4},\n    ]);\n\n    const addStore=(store,location)=>{\n        setStores([...stores,{store,location,id:uuid()}])\n    }\n\n    const removeStore=(id)=>{\n     setStores(stores.filter(store=>store.id!==id))\n\n    }\n\n\n\n    return (\n        <storesContext.Provider value={{stores,addStore,removeStore}}>\n        {props.children}\n        </storesContext.Provider>\n    )\n}\n\nexport default StoreContextProvider;\n","import React,{useContext}from 'react'\nimport { storesContext } from '../context/StoreContext'\n\n\nconst Navbar=(props)=> {\nconst {stores}=useContext(storesContext);\n\n   return(\n        <div className=\"navbar \">\n    <h1>Available storeList in your area</h1>\n    <p>Currently you have {stores.length} in your storeList </p>\n        \n            \n        </div>\n    )\n}\n\nexport default Navbar\n","import React, {useContext}from 'react'\nimport { storesContext } from '../context/StoreContext'\n\nconst StoreDetails=({store})=> {\n    const {removeStore} = useContext(storesContext);\n    return (\n        <div className='store-list'>\n            <li   onClick={()=>removeStore(store.id)}>\n    <div className=\"store\">{store.store}</div>\n    <div className=\"location\">{store.location}</div>\n            </li>\n        </div>\n    )\n}\n\nexport default StoreDetails\n","import React,{useContext} from 'react';\nimport StoreDetails from './StoreDetails'\nimport {storesContext} from '../context/StoreContext'\n\nconst StoreList=()=> {\n    const{stores}=useContext(storesContext)\n    return stores.length? (\n        <div className=\"store-list\">\n            <ul>\n                \n                {stores.map(store=>{return(<StoreDetails store={store} Key={store.id}/>);\n                })}\n               \n            </ul>\n        </div>\n    ):(\n          <div className='empty'>\n              Hey...There is no store around you !!! please find one\n          </div>\n    )\n}\n\nexport default StoreList\n","import React,{useContext,useState} from 'react'\nimport { storesContext } from '../context/StoreContext';\n\n\nconst NewForm=()=> {\n    const {addStore}=useContext(storesContext);\n    const [store,setStore]=useState('');\n    const [location,setLocation]=useState('');\n    \n    const handleStore=(e)=>{\n        e.preventDefault();\n       addStore(store,location);\n       setStore('');\n       setLocation('');\n    }\n    return (\n      \n       <form onSubmit={handleStore}>\n       <input type=\"text\"  placeholder={'stores'} value={store} onChange={(e)=>setStore(e.target.value)} required/>\n       <input type=\"text\"  placeholder={'store location'} value={location} onChange={(e)=>setLocation(e.target.value)} required/>\n   \n       <input type=\"submit\" value=\"AddToStoreList\" onClick={handleStore}/>\n       </form>\n    \n    )\n}\n\nexport default NewForm ;\n","import React from 'react'\n\n\n        var CreateStoreForm= React.createClass({\n        getInitialState: function(){\n                return({\n                    stores: []\n                });\n            },\n            render: function(){\n                var stores = this.state.stores;\n                stores = stores.map(function(store, index){\n                    return(\n                        <li key={index}>\n                            <span className={store.obj.available}></span>\n                            <span className=\"name\">{store.obj.name}</span>\n                            <span className=\"img\">{store.obj.img}</span>\n                            <span className=\"dist\">{Math.floor(store.dis / 1000)} km</span>\n                        </li>\n                    );\n                });\n             return(\n                    <div id=\"store-container\">\n                        <form id=\"search\" onSubmit={this.handleSubmit}>\n                            <label>upload your image</label>\n                            <input type=\"text\" ref=\"img\" placeholder=\"img\" required />\n                            <label>Enter your Latitude:</label>\n                            <input type=\"text\" ref=\"lat\" placeholder=\"latitude\" required />\n                            <label>Enter your Longitude:</label>\n                            <input type=\"text\" ref=\"lng\" placeholder=\"longitude\" required />\n                            <input type=\"submit\" value=\"Find store\" />\n                        </form>\n                        <ul>{stores}</ul>\n                    </div>\n                );\n            },\n              handleSubmit: function(e){\n                e.preventDefault();\n                  var lng = this.refs.lng.value;\n                var lat = this.refs.lat.value\n                \n                   fetch('/api/stores?lng=' + lng + '&lat=' + lat).then(function(data){\n                  return data.json();\n                }).then( json => {\n                    this.setState({\n                        stores: json\n                    });\n                    console.log(json);\n                });\n            }\n        });\n   export default CreateStoreForm;\n        \n","import React from 'react';\nimport StoreContextProvider from './context/StoreContext';\nimport Navbar from './component/Navbar';\nimport StoreList from './component/StoreList';\nimport NewForm from './component/NewForm';\nimport CreateStoreForm from './component/CreateStoreForm';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <StoreContextProvider>\n     <Navbar/>\n     <StoreList/>\n     <NewForm/>\n     <CreateStoreForm/>\n     </StoreContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}